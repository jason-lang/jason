/*
   Jason Gradle build file
*/

plugins {
    id 'java-library'
    id "ca.coglinc.javacc" version "2.4.0"   // see https://github.com/johnmartel/javaccPlugin
    id 'maven-publish'
    id 'org.jreleaser' version '1.20.0'
}

defaultTasks 'jar'

version "${jasonVersion}"
group   "${groupId}"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()    
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/generated/javacc'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

tasks.sourcesJar {
    dependsOn("compileJavacc")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    mavenCentral()

    maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
}

dependencies {
    api 'net.sf.ingenias:jade:4.3'

    api 'javax.json:javax.json-api:1.1.4'
    api 'org.glassfish:javax.json:1.1.4'

    testImplementation 'junit:junit:4.12'
}

jar {
    // archiveBaseName = 'jason'
    manifest {
        attributes 'Specification-Title': 'Jason Language',
                   'Specification-Version': project.version,
                   'Implementation-Version': new Date().toString(),
                   'Main-Class': 'jason.infra.local.RunLocalMAS'
    }
    from('src') {
        include '/test/jason/inc/**/*.asl'
        include '/test/jason/**/*.mas2j'
    }
}

compileJavacc {
    inputDirectory = file('src/main/javacc')
    outputDirectory = file(project.buildDir.absolutePath + '/generated/javacc')
}


jjdoc {
    outputDirectory = file(project.projectDir.absolutePath + '/../doc/tech')
}

// the following lines is used to avoid errors while generating javadoc
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption("Xmaxwarns", "1")
      }
    }
}

// artifacts {
//     archives jar //, sourceJar, javadocJar
// }

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'jason-interpreter'
            from components.java

            pom {
                name = 'Jason'
                url = 'https://jason-lang.github.io'
                description = 'Jason is a programming language to develop BDI/cognitive agents'
                developers {
                    developer {
                        name.set('Jomi Fred Hubner')
                        email.set('jomifred@gmail.com')
                        url.set('https://jomifred.github.io')
                    }
                    developer {
                        name.set('Rafael Heitor Bordini')
                        email.set('rafael.h.bordini@gmail.com')
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/jason-lang/jason'
                    developerConnection = 'scm:git:https://github.com/jason-lang/jason'
                    url = 'https://github.com/jason-lang/jason'
                }            
                licenses {
                    license {
                        name = 'LGPLv3'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.html'
                    }
                }
            }            
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }        
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }
    gitRootSearch = true    

    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}

task publishMavenGitHub(dependsOn: [ 'build', 'publishToMavenLocal']) {
  group = "publishing"
  doLast {
    def wdir = System.getProperty("user.home")+'/.m2/repository/io/github/jason-lang/jason-interpreter' //org/jason/jason'
    def rdir = project.projectDir.absolutePath+'/../../jacamo-mvn-repo'
    exec {
        commandLine 'git', 'pull'
        workingDir rdir
    }
    copy {
        from wdir
        into rdir + '/io/github/jason-lang/jason-interpreter'
    }
    exec {
        commandLine 'git', 'add', '*'
        workingDir rdir
    }
    exec {
        commandLine 'git', 'commit', '-a', '-m', 'new version of jason '+project.version
        workingDir rdir
    }
    exec {
        commandLine 'git', 'push'
        workingDir rdir
    }
  }
}

/**
 * Gradle task to execute unit tests for Jason agents
 * To run this script in a virtual machine to simulate a CI environment type:
 * $ docker volume create --name gradle-cache
 * $ docker run -ti --rm -u gradle -v gradle-cache:/home/gradle/.gradle -v "$PWD":/home/gradle/project -w /home/gradle/project -p 8000:8000 gradle:6.3.0-jdk11 bash -c "./gradlew config test -i"
 */
task testJason(dependsOn: 'jar') {
    description 'runs Jason unit tests: tests.mas2j'
    def errorOnTests = false
    outputs.upToDateWhen { false } // disable cache

    doFirst {
        try {
            javaexec {
                jvmArgs += '--enable-preview'
                main = 'jason.infra.local.RunLocalMAS'
                if (gradle.startParameter.logLevel.toString().equals("DEBUG")) {
                    args = ['src/test/jason/unit_tests.mas2j', '--log-conf', 'src/main/resources/templates/console-debug-logging.properties']
                } else if (gradle.startParameter.logLevel.toString().equals("INFO")) {
                    args = ['src/test/jason/unit_tests.mas2j', '--log-conf', 'src/main/resources/templates/console-info-logging.properties']
                } else {
                    args = ['src/test/jason/unit_tests.mas2j', '--log-conf', 'src/main/resources/templates/console-lifecycle-logging.properties']
                }
                classpath sourceSets.main.runtimeClasspath
                sourceSets.test.java.srcDirs += ['src/test/jason/jia']

                errorOutput = new ByteArrayOutputStream()
                standardOutput = new ByteArrayOutputStream()

                ext.stdout = {
                    return standardOutput.toString()
                }
                ext.errout = {
                    return errorOutput.toString()
                }
            }
        } catch (Exception e) {
            errorOnTests = true
        }
    }

    doLast {
        def styler = 'black red green yellow blue magenta cyan white'
            .split().toList().withIndex(30)
            .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }

        def std = stdout()
        std.splitEachLine('\n') { String line ->
            line = line.replace("TESTING","${styler['yellow']('TESTING')}")
            line = line.replace("PASSED","${styler['green']('PASSED')}")
            line = line.replace("FAILED","${styler['red']('FAILED')}")
            line = line.replace("TODO","${styler['magenta']('TODO')}")
            line = line.replace("LAUNCHING","${styler['blue']('LAUNCHING')}")
            println line
        }

        def err = errout()
        err.splitEachLine('\n') { String line ->
            line = line.replace("TESTING","${styler['yellow']('TESTING')}")
            line = line.replace("PASSED","${styler['green']('PASSED')}")
            line = line.replace("FAILED","${styler['red']('FAILED')}")
            line = line.replace("TODO","${styler['magenta']('TODO')}")
            line = line.replace("LAUNCHING","${styler['blue']('LAUNCHING')}")
            println line
        }

        if (errorOnTests) {
            throw new GradleException('Jason unit tests: ERROR!')
        }
    }
}
//tasks.build.finalizedBy testJason
